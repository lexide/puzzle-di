<?php
/**
 * @package Puzzle-DI
 * @copyright Copyright Â© 2015 Danny Smart
 */

namespace Lexide\PuzzleDI\Compiler;

use Lexide\PuzzleDI\Exception\ConfigurationException;

class PuzzleClassCompiler
{

    /**
     * @param array $data
     * @param string $appNamespace
     * @param string $appSourceDir
     * @param string $appRootDir
     * @throws ConfigurationException
     */
    public function compile(array $data, string $appNamespace, string $appSourceDir, string $appRootDir): void
    {
        if (!empty($appNamespace)) {
            // trim any trailing slashes
            $appNamespace = rtrim($appNamespace, "\\");
            $appNamespace = "\nnamespace $appNamespace;";
        }

        $configList = array();
        foreach ($data as $key => $configs) {
            $keyConfigs = array();
            foreach ($configs as $config) {
                // validate path
                if (isset($config["class"])) {
                    $class = $config["class"];
                    if (!class_exists($class)) {
                        throw new ConfigurationException("The class '$class' does not exist");
                    }
                    $configItem = $class;
                } elseif (isset($config["path"])) {
                    $path = $config["path"];
                    if (!is_file($path) || !is_readable($path)) {
                        throw new ConfigurationException("The path '$path' does not exist or is not readable");
                    }

                    if (!empty($appRootDir) && str_starts_with($path, $appRootDir)) {
                        $path = substr($path, strlen($appRootDir));
                    }

                    $configItem = $path;
                } else {
                    throw new ConfigurationException("There was no class or file path for the key '$key'");
                }

                if (empty($config["name"]) && empty($config["alias"])) {
                    throw new ConfigurationException("There is no name or alias associated with key '$key'");
                }

                $configKey = $config["alias"] ?? $config["name"];
                $keyConfigs[] = "            \"$configKey\" => \"$configItem\"";
            }

            $configList[] = "        \"$key\" => [\n" . implode(",\n", $keyConfigs) . "\n        ]";

        }
        $configList = implode(",\n", $configList);

        $classSource = <<<SOURCE
<?php
/**
 * Puzzle Config - Auto-generated by Puzzle-DI via composer
 */
$appNamespace

use Lexide\PuzzleDI\Compiler\AbstractPuzzleConfig;

class PuzzleConfig extends AbstractPuzzleConfig
{

    protected static array \$configList = [
$configList
    ];

}

SOURCE;

        // if the source directory doesn't exist try to create it
        if (!is_dir($appSourceDir)) {
            try {
                mkdir($appSourceDir, 0755, true);
            } catch (\ErrorException $e) {
                throw new ConfigurationException("The path $appSourceDir does not exist and Puzzle DI could not create it");
            }
        }

        file_put_contents($this->getPuzzleConfigFilepath($appSourceDir), $classSource);
    }

    /**
     * @param string $appSourceDir
     * @return string
     */
    public function getPuzzleConfigFilepath(string $appSourceDir): string
    {
        return $appSourceDir . "PuzzleConfig.php";
    }

} 
